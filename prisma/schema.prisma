// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int       @id @default(autoincrement())
  username     String
  email        String    @unique
  password     String    @default("changeme")
  address      String
  isActive     Boolean   @default(false)
  otpCode     String?
  otpExpiresAt DateTime?
  role        String      @default("Client")

  carts   Cart[]
  orders  Order[]
}

model Product {
  productId   Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  image       String

  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [categoryId])

  cartItems   CartItem[]
}

model Category {
  categoryId  Int       @id @default(autoincrement())
  name        String
  description String

  products Product[]
}

model Cart {
  cartId     Int        @id @default(autoincrement())
  userId     Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user       User       @relation(fields: [userId], references: [userId])
  items      CartItem[]
}

model CartItem {
  cartItemId Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int

  cart    Cart    @relation(fields: [cartId], references: [cartId])
  product Product @relation(fields: [productId], references: [productId])
}

model Order {
  orderId     Int       @id @default(autoincrement())
  userId      Int
  createdAt   DateTime  @default(now())
  status      String
  totalAmount Float

  user     User     @relation(fields: [userId], references: [userId])
  payment  Payment?
}

model Payment {
  paymentId    Int      @id @default(autoincrement())
  orderId      Int      @unique
  paymentDate  DateTime @default(now())
  paymentOption String
  amount       Float

  order Order @relation(fields: [orderId], references: [orderId])
}
